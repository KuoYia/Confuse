在spring-aop-annotaion-05模块中完成以下任务：
1.记录dao类查询方法的耗时时间：环绕通知的使用
2.记录dao类增删改方法出现的异常信息：异常通知的使用
3.dao类中关闭sqlSession：最终final通知
4.记录service类中查询方法的返回值：返回通知
5.模拟检查权限，有权限则执行controller类里的方法：前置通知

开发过程：
1）添加aop依赖
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>6.1.12</version>
    </dependency>
    <!-- spring-aspects会帮我们传递过来aspectjweaver -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aspects</artifactId>
        <version>6.1.12</version>
    </dependency>

2)编写切面类
创建aspect子包，子包中创建类MyAspect
 2.1在MyAspect类上添加切面注解
 @Aspect
 @Component
 public class MyAspect {
 }

 2.2在MyAspect类中编写切入点(针对上述5个任务编写切入点)

     //@Pointcut标记切入点，切入点的id即方法名，execution()是切入点表达式的固定写法

     //1.记录dao类查询方法的耗时时间
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
     public void daoQueryPoint(){}

     //2.记录dao类增删改方法出现的异常信息
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.insert*(..))")
     public void daoInsertPoint(){}
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.delete*(..))")
     public void daoDeletePoint(){}
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.update*(..))")
     public void daoUpdatePoint(){}

     //3.dao类中关闭sqlSession
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.*(..))")
     public void daoAllMethodPoint(){}

     //4.记录service类中查询方法的返回值
     @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
     public void serviceQueryPoint(){}

     //5.模拟检查权限，有权限则执行controller类里的方法
     @Pointcut(value = "execution(* com.javaee.aop05.controller.*.*(..))")
     public void controllerAllMethodPoint(){}

2.3在MyAspect类中编写要织入的代码，并标注通知和切入点(针对上述5个任务编写切入点)
以1.记录dao类查询方法的耗时时间为例，
学习环绕通知对应方法的编写，且环绕通知必须配合ProceedingJoinPoint接口

    //1.记录dao类查询方法的耗时时间：环绕通知的使用
    //引用其他类中的切入点：类的全限定名.方法名
    //@Around(value = "com.javaee.aop05.aspect.MyAspect.daoQueryPoint()")
    //@Around(value = "daoQueryPoint()")
    @Around(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
    public Object saveQureyTime(ProceedingJoinPoint proceedingJoinPoint){
        Object returnValue=null;
        long startTime = System.currentTimeMillis();
        try {
            //执行目标方法，即本任务中的dao类查询方法
            returnValue = proceedingJoinPoint.proceed(proceedingJoinPoint.getArgs());
        } catch (Throwable e) {
            e.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        String className = proceedingJoinPoint.getTarget().getClass().getName();
        String methodName = proceedingJoinPoint.getSignature().getName();
        System.out.println(className+"."+methodName+"执行耗时："+(endTime-startTime)+"毫秒");
        return returnValue;
    }

3.在配置类SpringConfig中开启aspectj注解的支持
在类上添加@EnableAspectJAutoProxy

4.测试验证是否能成功织入代码（Spring-test环境）
在AOPTest类添加测试代码

//2.记录dao类增删改方法出现的异常信息：异常通知的使用
//3.dao类中关闭sqlSession：最终final通知
//4.记录service类中查询方法的返回值：返回通知
//5.模拟检查权限，有权限则执行controller类里的方法：前置通知
@Aspect
@Component
public class MyAspect2 {

    //2.记录dao类增删改方法出现的异常信息：异常通知的使用
    //2.1 应该选择异常通知，会在程序出现异常的时刻，织入代码   对应注解@AfterThrowing
    //2.2 通知可绑定多个切入点
    //2.3 获取异常信息：1）方法声明异常类型的形参 2）通知中配置throwing属性，值必须等于形参名
    @AfterThrowing(value = "MyAspect.daoInsertPoint()||MyAspect.daoDeletePoint()||MyAspect.daoUpdatePoint()"
                   ,throwing="e")
    public void ExceptionLog(JoinPoint joinPoint,Exception e){
        System.out.println("----异常通知 开始----");
        //记录哪个类的方法哪个时刻出现异常，异常信息
        long currentTime = System.currentTimeMillis();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();

        System.out.println(className+"."+methodName+"执行时间："+simpleDateFormat.format(currentTime));
        System.out.println("异常信息："+e.getMessage());
        System.out.println("----异常通知 结束----");
    }
    //3.dao类中关闭sqlSession：最终final通知
    //不管程序执行成功还是出现异常，都会织入代码
    @After(value= "MyAspect.daoAllMethodPoint()")
    public void closeSqlSession(JoinPoint joinPoint){
        System.out.println("----最终final通知 开始----");

        long currentTime = System.currentTimeMillis();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();
        System.out.println(className+"."+methodName+"执行时间："+simpleDateFormat.format(currentTime));
        System.out.println("模拟关闭sqlsession对象");

        System.out.println("----最终final通知 结束----");
    }

    //4.记录service类中查询方法的返回值：返回通知@AfterReturning
    //只有成功执行才会织入代码
    //获取目标方法的返回值：1）方法声明Object类型的形参 2）通知中配置returning属性，值必须等于形参名
    @AfterReturning(value="MyAspect.serviceQueryPoint()",returning="queryResult")
    public void queryResultLog(JoinPoint joinPoint,Object queryResult){
        System.out.println("----返回通知 开始----");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();

        System.out.println(className+"."+methodName+"返回值："+queryResult);
        System.out.println("----返回通知 结束----");
    }

    //5.模拟检查权限，有权限则执行controller类里的方法
    //自行完成

}

**********************MyAspect start********************************
@Aspect
@Component
public class MyAspect {

    //@Pointcut标记切入点，切入点的id即方法名，execution()是切入点表达式的固定写法
    //1.记录dao类查询方法的耗时时间
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
    public void daoQueryPoint(){}

    //2.记录dao类增删改方法出现的异常信息
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.insert*(..))")
    public void daoInsertPoint(){}
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.delete*(..))")
    public void daoDeletePoint(){}
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.update*(..))")
    public void daoUpdatePoint(){}

    //3.dao类中关闭sqlSession
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.*(..))")
    public void daoAllMethodPoint(){}

    //4.记录service类中查询方法的返回值
    @Pointcut(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
    public void serviceQueryPoint(){}

    //5.模拟检查权限，有权限则执行controller类里的方法
    @Pointcut(value = "execution(* com.javaee.aop05.controller.*.*(..))")
    public void controllerAllMethodPoint(){}

    //1.记录dao类查询方法的耗时时间：环绕通知的使用
    //引用其他类中的切入点：类的全限定名.方法名
    //@Around(value = "com.javaee.aop05.aspect.MyAspect.daoQueryPoint()")
    //@Around(value = "daoQueryPoint()")
    @Around(value = "execution(* com.javaee.aop05.dao.impl.*.select*(..))")
    public Object saveQureyTime(ProceedingJoinPoint proceedingJoinPoint){
        System.out.println("----环绕通知 开始----");
        Object returnValue=null;
        long startTime = System.currentTimeMillis();
        try {
            //ProceedingJoinPoint是为环绕通知量身定制的！
            Object[] args = proceedingJoinPoint.getArgs();//可以不传
            //执行目标方法，即本任务中的dao类查询方法
            returnValue = proceedingJoinPoint.proceed();
        } catch (Throwable e) {
            e.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        String className = proceedingJoinPoint.getTarget().getClass().getName();
        String methodName = proceedingJoinPoint.getSignature().getName();
        System.out.println(className+"."+methodName+"执行耗时："+(endTime-startTime)+"毫秒");
        System.out.println("----环绕通知 结束----");
        return returnValue; //必须要返回，否则目标方法执行后没有返回值
    }
}

**********************MyAspect end********************************

**********************MyAspect2 start********************************
@Aspect
@Component
public class MyAspect2 {

    //2.记录dao类增删改方法出现的异常信息：异常通知的使用
    //2.1 应该选择异常通知，会在程序出现异常的时刻，织入代码   对应注解@AfterThrowing
    //2.2 通知可绑定多个切入点
    //2.3 获取异常信息：1）方法声明异常类型的形参 2）通知中配置throwing属性，值必须等于形参名
    @AfterThrowing(value = "MyAspect.daoInsertPoint()||MyAspect.daoDeletePoint()||MyAspect.daoUpdatePoint()"
                   ,throwing="e")
    public void ExceptionLog(JoinPoint joinPoint,Exception e){
        System.out.println("----异常通知 开始----");
        //记录哪个类的方法哪个时刻出现异常，异常信息
        long currentTime = System.currentTimeMillis();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();
        System.out.println(className+"."+methodName+"执行时间："+simpleDateFormat.format(currentTime));
        System.out.println("异常信息："+e.getMessage());
        System.out.println("----异常通知 结束----");
    }
    //3.dao类中关闭sqlSession：最终final通知
    //不管程序执行成功还是出现异常，都会织入代码
    @After(value= "MyAspect.daoAllMethodPoint()")
    public void closeSqlSession(JoinPoint joinPoint){
        System.out.println("----最终final通知 开始----");

        long currentTime = System.currentTimeMillis();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();
        System.out.println(className+"."+methodName+"执行时间："+simpleDateFormat.format(currentTime));
        System.out.println("模拟关闭sqlsession对象");

        System.out.println("----最终final通知 结束----");
    }

    //4.记录service类中查询方法的返回值：返回通知@AfterReturning
    //只有成功执行才会织入代码
    //获取目标方法的返回值：1）方法声明Object类型的形参 2）通知中配置returning属性，值必须等于形参名
    @AfterReturning(value="MyAspect.serviceQueryPoint()",returning="queryResult")
    public void queryResultLog(JoinPoint joinPoint,Object queryResult){
        System.out.println("----返回通知 开始----");
        String className = joinPoint.getTarget().getClass().getName();
        String methodName = joinPoint.getSignature().getName();

        System.out.println(className+"."+methodName+"返回值："+queryResult);
        System.out.println("----返回通知 结束----");
    }

    //5.模拟检查权限，有权限则执行controller类里的方法
    //自行完成
}
**********************MyAspect2 end********************************





